shiny::runApp()
runApp('~/shiny practices.R')
#install.packages("shiny")
library("shiny")
my_ui <- fluidPage(
h1("Hello Shiny"),# control widget
sidebarPanel(
textInput('user_name', label="What is your name?")
),
mainPanel(
textOutput(outputId = "message")
)
)
my_server <- function(input_list, output_list) {
output_list$message <- renderText({
#find what the user typed in
greeting <- paste("Hello", input_list$user_name)
return(greeting)
})
}
shinyApp(ui = my_ui, server = my_server)
runApp('shiny practices.R')
# Load libraries so they are available
library("shiny")
# We'll begin by defining some of the UI elements as variables
# This helps keep the code organized and easier to debug
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
#img(src = "inequality.png")
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
)
# Next, we'll define a few UI elements to render in our second panel
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
# A `plotOutput()` element showing the 'plot' output (defined in the server)
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
# Define a variable `growth_panel` for your second page. It should be a
# `tabPanel()` with a title "Growth Chart" to represent the second tab.
# This layout will contain the following elements:
# A `titlePanel()` with the text "Income growth 1980-2014"
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
# Your `sidebar_content`
# Your `main_content`
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
# Exercise 4: complex Shiny UI layouts
# Load libraries so they are available
library("shiny")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
# You will need to fill in the `app_ui.R` file to create the layout.
# Run the app through this file.
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = ui, server = server)
runApp('~/book-exercises/chapter-19-exercises/exercise-4')
