library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
View(data)
reviews <- flatten(data)
reviews <- flatten(data)
# load relevant libraries
library("httr")
library("jsonlite")
library("knitr")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
reviews <- flatten(data)
reviews <- flatten(data)
reviews <- flatten(data)
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
library("jsonlite")
reviews <- flatten(data)
is.data.frame(data)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- as.data.frame(fromJSON(body))
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
View(reviews)
recent <- reviews(data) %>% head(1)
recent <- reviews %>% head(1)
# load relevant libraries
library("httr")
library("jsonlite")
library("dplyr")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- as.data.frame(fromJSON(body))
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
recent <- reviews %>% head(1)
# Create a list of the three pieces of information from above.
# Print out the list.
View(recent)
# load relevant libraries
library("httr")
library("jsonlite")
library("dplyr")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- as.data.frame(fromJSON(body))
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
recent <- reviews %>% head(1)
# Create a list of the three pieces of information from above.
# Print out the list.
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
recent <- reviews %>% head(1)
headline <- pull(recent, results.headline)
short_summary <- pull(recent, results.short_summary)
link <- pull(recent, results.link.url)
short_summary <- pull(recent, results.short_summary)
short_summary <- pull(recent, results.summary_short)
link <- pull(recent, results.link.url)
short_summary
link
headline
# Print out the list.
list <- list(
headline = headline,
short_summary = short_summary,
link = link
)
print(list)
# load relevant libraries
library("httr")
library("jsonlite")
library("dplyr")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- as.data.frame(fromJSON(body))
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
is.data.frame(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
recent <- reviews %>% head(1)
headline <- pull(recent, results.headline)
short_summary <- pull(recent, results.summary_short)
link <- pull(recent, results.link.url)
# Create a list of the three pieces of information from above.
# Print out the list.
list <- list(
headline = headline,
short_summary = short_summary,
link = link
)
print(list)
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price)) +
geom_point(alpha = 0.3) +
geom_smooth() +
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price)) +
geom_point(alpha = 0.3) +
geom_smooth()
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Exercise 2: advanced ggplot2 practice
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
## Position Adjustments
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
# Draw the same chart again, but with each element positioned to "dodge" each other
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
## Scales
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data= diamonds_sample) +
geom_boxplot(mapping = aes(x=color, y= price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data= diamonds_sample) +
geom_boxplot(mapping = aes(x=color, y= price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data= diamonds_sample) +
geom_violin(mapping = aes(x=color, y= price))+
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x=carat, y= price)) +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x=carat, y= price, color = clarity)) +
scale_color_brewer(palette = "Dark2")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
## Coordinate Systems
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
# Draw the same chart, but with the coordinate system flipped
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
## Facets
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) +
geom_point(mapping = aes(x= carat, y= price, color = clarity)) +
facet_wrap(~color)
## Saving Plots
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x=carat, y= price, color = clarity)) +
scale_color_brewer(palette = "Dark2")
# for faster results)
ggplot(data = diamonds) +
geom_point(mapping = aes(x=carat, y= price, color = clarity)) +
scale_color_brewer(palette = "Dark2")
recent<- ggplot(data = diamonds) +
geom_point(mapping = aes(x= carat, y= price, color = clarity)) +
facet_wrap(~color)
setwd("~/book-exercises/chapter-16-exercises/exercise-2")
ggsave(recent, "myplot.png")
ggsave("myplot.png")
